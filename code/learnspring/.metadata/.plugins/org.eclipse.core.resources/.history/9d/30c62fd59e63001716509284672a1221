package com.alice.spring.aop;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Before;

/**
 * 设置通知
 * Joinpoint：连接点，通知触发的点
 * Pointcut：一系列连一个接点的集合
 * Advice：通知，在连接点处扩展的操作
 * Target Object：目标对象，被通知或代理的对象
 * Aspect：一个编程思想，通过通知或拦截器实现
 * @autor xuxhm
 *
 */
public class Adivisor {
	
	public void test(){
		System.out.println("test");
	}

	@Before(value="test")
	public void before(){
		System.out.println("before");
	}
	
	@After
	public void after(){
		System.out.println("after");
	}
	
	
	public void around(){
		System.out.println("around");
	}
	
	public void finnaly(){
		System.out.println("finnaly");
	}
}
